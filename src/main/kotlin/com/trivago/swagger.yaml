openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: Local Server
    url: http://0.0.0.0:8080
info:
  description: Service for managing Accommodation listings
  version: "1.0.0"
  title: Trivago Listing Service
  contact:
    email: gibsonsilali@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /v1/accommodations:
    get:
      summary: fetches accommodations
      operationId: fetchAccommodations
      description: |
        You can fetch accommodations, you can also pass optional parameters for
      parameters:
        - in: query
          name: rating
          description: accommodation rating
          required: false
          schema:
            type: integer
        - in: query
          name: reputationBadge
          description: string representing accommodation reputation
          schema:
            type: string
            enum:
              - red
              - yellow
              - green
        - in: query
          name: city
          description: Allows searching of accommodations by city name
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accommodation'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      summary: adds accommodation
      operationId: createAccommodation
      description: Adds an accommodation item
      responses:
        '200':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: an existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccommodationRequestBody'
        description: Adds Accommodation Item

  /v1/accommodations/:id:
    get:
      summary: fetches accommodations
      operationId: fetchAccommodations
      description: Fetch Accommodation by ID
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'

        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    patch:
      summary: updates accommodation
      operationId: updatesAccommodation
      description: updates an accommodation item
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: an existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccommodationUpdateRequestBody'
        description: Updates item
    delete:
      summary: deletes an accommodation by ID
      operationId: deleteAccommodations
      description: Delete Accommodation by ID
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Accommodation successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /v1/accommodations/:id/book:
    patch:
      summary: updates accommodation
      operationId: bookAccommodation
      description: books a accommodation
      parameters:
        - in: path
          name: id
          description: Accommodation ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: an existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessage'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                numberOfRooms:
                  type: integer

        description: Updates item


components:
  schemas:
    Accommodation:
      type: object
      required:
        - id
        - name
        - rating
        - category
        - location
        - image
        - reputation
        - reputationBadge
        - availability
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        rating:
          type: integer
        category:
          type: string
          enum:
            - hotel
            - alternative
            - hostel
            - lodge
            - resort
        location:
          $ref: '#/components/schemas/Location'
        image:
          type: string
          format: url
        reputation:
          type: integer
        reputationBadge:
          format: string
          enum:
            - red
            - yellow
            - green
        availability:
          type: integer

    AccommodationRequestBody:
      type: object
      required:
        - name
        - rating
        - category
        - location
        - image
        - reputation
        - reputationBadge
        - availability
      properties:
        name:
          type: string
        rating:
          type: integer
        category:
          type: string
          enum:
            - hotel
            - alternative
            - hostel
            - lodge
            - resort
        location:
          $ref: '#/components/schemas/Location'
        image:
          type: string
          format: url
        reputation:
          type: integer
        reputationBadge:
          format: string
          enum:
            - red
            - yellow
            - green
        availability:
          type: integer

    AccommodationUpdateRequestBody:
      type: object
      properties:
        name:
          type: string
        rating:
          type: integer
        category:
          type: string
          enum:
            - hotel
            - alternative
            - hostel
            - lodge
            - resort
        location:
          $ref: '#/components/schemas/Location'
        image:
          type: string
          format: url
        reputation:
          type: integer
        reputationBadge:
          format: string
          enum:
            - red
            - yellow
            - green
        availability:
          type: integer

    Location:
      required:
        - city
        - state
        - country
        - zipCode
        - address
      type: object
      properties:
        id:
          type: string
          format: uuid
        city:
          type: string
        country:
          type: string
        zipCode:
          type: integer
        address:
          type: string

    ErrorMessage:
      type: object
      properties:
        error:
          type: string

    SuccessMessage:
      type: object
      properties:
        message:
          type: string

    ValidationErrorMessage:
      type: object
      properties:
        key:
          type: array
          items:
            type: string
